{
  "^get ping$": "echo 'pong'",
  "^new ping$": "echo '%0'",
  "^get account ([A-Za-z0-9_]+)$": "if [ $(grep -c %1 /etc/passwd) -eq 1 ]; then echo \"$(id -P %1):$(id -Gn %1):$(pdbedit %1)\" | awk -F: '{ printf \"{ \\\"login\\\": \\\"%s\\\", \\\"locked\\\": %s, \\\"gecos\\\": \\\"%s\\\", \\\"shell\\\": %s, \\\"admin\\\": %s, \\\"samba\\\": %s }\", $1, ($2~/LOCKED/)?\"true\":\"false\", $8, ($10~/nologin/)?\"false\":\"true\", ($11~/(^| )wheel( |$)/)?\"true\":\"false\", ($3==$13)?\"true\":\"false\" }'; else echo \"\\\"User does not exist.\\\"\"; fi",
  "^set account ([A-Za-z0-9_]+) password$": "if [ '%1' == '%u' ]; then if echo '%0' | pw usermod %u -h0 && printf '%0\\n%0\\n' | smbpasswd %u >/dev/null 2>&1; then echo true; else echo false; fi; else echo 'false'; fi",
  "^get filesystem table$": "awk 'BEGIN { printf \"[\" } /^[^#]/ { printf \"%s  { \\\"filesystem\\\": \\\"%s\\\", \\\"mountpoint\\\": \\\"%s\\\", \\\"vfstype\\\": \\\"%s\\\", \\\"mntops\\\": \\\"%s\\\", \\\"freq\\\": \\\"%s\\\", \\\"passno\\\": \\\"%s\\\" }\", (++count==1)?\"\\n\":\",\\n\", $1, $2, $3, $4, $5, $6 } END { printf \"\\n]\" }' /etc/fstab",
  "^get filesystem stats$": "df -h | awk 'BEGIN { printf \"[\" } (NR>1) { printf \"%s  { \\\"filesystem\\\": \\\"%s\\\", \\\"size\\\": \\\"%s\\\", \\\"used\\\": \\\"%s\\\", \\\"available\\\": \\\"%s\\\", \\\"capacity\\\": \\\"%s\\\", \\\"mountpoint\\\": \\\"%s\\\" }\", (++count==1)?\"\\n\":\",\\n\", $1, $2, $3, $4, $5, $6 } END { printf \"\\n]\" }'",
  "^get system account$": "awk -F: 'BEGIN { printf \"{\" } { if ($3>=1000 && $3<32000) printf \"%s  \\\"%s\\\": { \\\"uid\\\": \\\"%s\\\", \\\"gecos\\\": \\\"%s\\\", \\\"shell\\\": \\\"%s\\\" }\", ($3==1001)?\"\\n\":\",\\n\", $1, $3, $5, $7 } END { printf \"\\n}\" }' /etc/passwd",
  "^get system account ([A-Za-z0-9_]+)$": "awk -F: 'BEGIN { printf \"{ \" } (/^%1:/) { printf \"\\\"login\\\": \\\"%s\\\", \\\"uid\\\": \\\"%s\\\", \\\"gecos\\\": \\\"%s\\\", \\\"shell\\\": \\\"%s\\\"\", $1, $3, $5, $7 } END { printf \" }\" }' /etc/passwd",
  "^get system account ([A-Za-z0-9_]+) group$": "id -Gn %1 | awk 'BEGIN { printf \"[\" } { for (i=1;i<=NF;i++) printf \"%s \\\"%s\\\"\", (++count==1)?\"\":\",\", $i } END { printf \" ]\" }'",
  "^get system account ([A-Za-z0-9_]+) group ([a-z]+)$": "id -Gn %1 | awk '/%2/ { member=1 } END { printf \"%s\", (member==1)?\"true\":\"false\" }'",
  "^get system board revcode$": "sysctl -n hw.board.revision",
  "^get system date iso$": "echo \\\"$(date -u -Iseconds)\\\"",
  "^get system processes top$": "top -b | awk 'BEGIN { printf \"[\" } (NR>7 && $0!=\"\") { printf \"%s  { \\\"pid\\\": \\\"%s\\\", \\\"user\\\": \\\"%s\\\", \\\"size\\\": \\\"%s\\\", \\\"res\\\": \\\"%s\\\", \\\"time\\\": \\\"%s\\\", \\\"wcpu\\\": \\\"%s\\\", \\\"command\\\": \\\"%s\\\" }\", (++count==1)?\"\\n\":\",\\n\",  $1, $2, $6, $7, $10, $11, $12 } END { printf \"\\n]\" }'",
  "^get system os$": "uname -mnrs | awk '{ printf \"{ \\\"machine\\\": \\\"%s\\\", \\\"name\\\": \\\"%s\\\", \\\"release\\\": \\\"%s\\\", \\\"system\\\": \\\"%s\\\" }\", $1, $2, $3, $4 }'",
  "^get system health$": "monit -B summary | tr '[A-Z]' '[a-z]' | awk 'BEGIN { printf \"{\" } (NR>2) { service=substr($0, 2, 32); sub(/[ ]+$/, \"\", service); status=substr($0, 35, 28); sub(/[ ]+$/, \"\", status); type=substr($0, 63, 18); sub(/[ ]+$/, \"\", type); printf \"%s  \\\"%s\\\": { \\\"status\\\": \\\"%s\\\", \\\"type\\\": \\\"%s\\\" }\", (++count==1)?\"\\n\":\",\\n\", service, status, type } END { printf \"\\n}\" }'",
  "^get system health ([a-z0-9_\\.]+)$": "monit -B summary | tr '[A-Z]' '[a-z]' | awk 'BEGIN { printf \"{\" } (NR>2) && /%1/ { service=substr($0, 2, 32); sub(/[ ]+$/, \"\", service); status=substr($0, 35, 28); sub(/[ ]+$/, \"\", status); printf \"%s  \\\"%s\\\": \\\"%s\\\"\", (++count==1)?\"\\n\":\",\\n\", service, status } END { printf \"\\n}\" }'",
  "^get system health ([a-z0-9_\\.]+) detail$": "monit -B status %1 | tr '[A-Z]' '[a-z]' | awk -F'  ' 'BEGIN { printf \"{\" } ($2) { printf \"%s  \\\"%s\\\": \\\"%s\\\"\", (++count==1)?\"\\n\":\",\\n\", $2, substr($0, 32) } END { print \"\\n}\" }'",
  "^set system health ([a-z0-9_\\.]+) monitor$": "monit monitor %1",
  "^get system service$": "awk -F= 'BEGIN { printf \"{\" } /_enable=/ { sub(/\"YES\"/, \"true\", $2); sub(/\"NO\"|\"NONE\"/, \"false\", $2); printf \"%s  \\\"%s\\\": %s\", (++count==1)?\"\\n\":\",\\n\", $1, $2 } END { printf \"\\n}\" }' /etc/rc.conf",
  "^get smb account": "pdbedit -Lw | awk -F: 'BEGIN { printf \"{\" } ($5~/U/ && $5!~/D/) { account=1 } { printf \"%s  \\\"%s\\\": { \\\"uid\\\": %i, \\\"enabled\\\": %s }\", (++count==1)?\"\\n\":\",\\n\", $1, $2, (account==1)?\"true\":\"false\" } END { printf \"\\n}\" }'",
  "^get smb account ([a-z0-9]+)$": "pdbedit -Lwu %1 | awk -F: 'BEGIN { printf \"{ \" } ($5~/U/ && $5!~/D/) { account=1 } { printf \"\\\"login\\\": \\\"%s\\\", \\\"uid\\\": %i, \\\"enabled\\\": %s\", $1, $2, (account==1)?\"true\":\"false\" } END { printf \" }\" }'",
  "^get smb config$": "testparm -s 2>/dev/null | tr -d '\t' | awk 'BEGIN { printf \"[\" } /^\\[.*\\]$/ { section=$0; sub(/\\[/, \"\", section); sub(/\\]/, \"\", section); next; } ($0!=\"\") && ($0 !~ /^#/ ) { split($0, kvp, \" = \"); printf \"%s  { \\\"section\\\": \\\"%s\\\", \\\"key\\\": \\\"%s\\\", \\\"value\\\": \\\"%s\\\" }\", (++count==1)?\"\\n\":\",\\n\", section, kvp[1], kvp[2] } END { printf \"\\n]\" }'",
  "^get smb config raw$": "testparm -s 2>/dev/null | awk 'BEGIN { printf \"[\" } (NR>1) { gsub(/\t/, \"  \", $0); printf \"%s  \\\"%s\\\"\", (++count==1)?\"\\n\":\",\\n\", $0 } END { printf \"\\n]\" }'",
  "^get smb config section$": "testparm -s 2>/dev/null | awk 'BEGIN { printf \"[\" } /\\[.*\\]/ { sub(/^\\[/, \"\", $0); sub(/\\]$/, \"\", $0); printf \"%s  \\\"%s\\\"\", (++count==1)?\"\\n\":\",\\n\", $0; } END { printf \"\\n]\" }'",
  "^get smb config section ([a-z0-9]+)$": "testparm -s 2>/dev/null | tr -d '\t' | awk 'BEGIN { printf \"{\\n\" } /^\\[%1\\]$/ { name=$1; sub(/\\[/, \"\", name); sub(/\\]/, \"\", name); printf \"  \\\"name\\\": \\\"%s\\\"\", name; next } ($0==\"\") { name=\"\" } (name!=\"\") { split($0, kvp, \" = \"); printf \",\\n  \\\"%s\\\": \\\"%s\\\"\", kvp[1], kvp[2] } END { printf \"\\n}\" }'"
}